/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    maven {
        url = 'http://nexus.pentaho.org/content/groups/omni'
    }

    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

dependencies {
    implementation 'pentaho-kettle:kettle-core:9.0.0.3-568'
    implementation ('pentaho-kettle:kettle-engine:9.0.0.3-568') {
        exclude group: 'javax.servlet'
    }
    implementation 'org.pentaho.di.plugins:pdi-core-plugins-impl:9.0.0.3-568'
    implementation 'org.pentaho.di.plugins:kettle-json-plugin-core:9.1.0.0-SNAPSHOT'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.26'
    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '2.1.2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

group = 'pentaho-kettle'
version = '9.0.0.3-568'
description = 'Pentaho Data Integration SDK Embedding Samples'
sourceCompatibility = '1.8'

java {
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    zip64 = true
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'com.test.Main'
        )
    }
}

task buildJar(type: Jar) {
    zip64 = true
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'com.citybrain.CsvInputTest'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
            {
                exclude "META-INF/*.SF"
                exclude "META-INF/*.DSA"
                exclude "META-INF/*.RSA"
            }
    with jar
}

test {
    useJUnitPlatform()
}